{"ast":null,"code":"var _jsxFileName = \"/home/akshaya/Documents/React Workspace/stop-watch/src/Timer.js\",\n  _s = $RefreshSig$();\n// import { useEffect, useState, useRef } from \"react\";\n\n// export default function Timer() {\n//   const [time, setTime] = useState(0);\n\n//   const [running, setRunning] = useState(true);\n\n//   const timer = useRef();\n\n//   useEffect(() => {\n//     if (running) {\n//       timer.current = setInterval(() => {\n//         setTime((prevTime) => prevTime + 1);\n//       }, 1000);\n//     }\n//     return () => clearInterval(timer.current);\n//   }, [running]);\n\n//   return (\n//     <div className=\"stopwatch\">\n//       <p className=\"timer\">{format(time)}</p>\n//       <div className=\"actions\">\n//         <button onClick={() => setTime(0)}>Restart</button>\n//         <button\n//           onClick={() => {\n//             if (running) clearInterval(timer.current);\n//             setRunning(!running);\n//           }}\n//         >\n//           {running ? \"Stop\" : \"Resume\"}\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n// const format = (time) => {\n//   let hours = Math.floor((time / 60 / 60) % 24);\n//   let minutes = Math.floor((time / 60) % 60);\n//   let seconds = Math.floor(time % 60);\n\n//   hours = hours < 10 ? \"0\" + hours : hours;\n//   minutes = minutes < 10 ? \"0\" + minutes : minutes;\n//   seconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n//   return hours + \":\" + minutes + \":\" + seconds;\n// };\n\nimport { useEffect, useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Timer() {\n  _s();\n  const [time, setTime] = useState(0);\n  const [running, setRunning] = useState(false); // Initially not running\n  const [laps, setLaps] = useState([]); // Array to store lap times\n  const timer = useRef();\n  useEffect(() => {\n    if (running) {\n      timer.current = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 1000);\n    } else {\n      clearInterval(timer.current);\n    }\n    return () => clearInterval(timer.current);\n  }, [running]);\n\n  // Function to handle lap\n  const handleLap = () => {\n    setLaps([...laps, time]);\n  };\n\n  // Function to format the time\n  const format = time => {\n    let hours = Math.floor(time / 60 / 60 % 24);\n    let minutes = Math.floor(time / 60 % 60);\n    let seconds = Math.floor(time % 60);\n    hours = hours < 10 ? \"0\" + hours : hours;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    return hours + \":\" + minutes + \":\" + seconds;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stopwatch\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"timer\",\n      children: format(time)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setRunning(true),\n        disabled: running,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setRunning(false),\n        disabled: !running,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTime(0),\n        disabled: running,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLap,\n        disabled: !running,\n        children: \"Lap\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"laps\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Laps\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: laps.map((lap, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Lap \", index + 1, \": \", format(lap)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(Timer, \"DqfCWVIAztFTEe0A+cwaGPNYABQ=\");\n_c = Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["useEffect","useState","useRef","jsxDEV","_jsxDEV","Timer","_s","time","setTime","running","setRunning","laps","setLaps","timer","current","setInterval","prevTime","clearInterval","handleLap","format","hours","Math","floor","minutes","seconds","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","map","lap","index","_c","$RefreshReg$"],"sources":["/home/akshaya/Documents/React Workspace/stop-watch/src/Timer.js"],"sourcesContent":["// import { useEffect, useState, useRef } from \"react\";\n\n// export default function Timer() {\n//   const [time, setTime] = useState(0);\n\n//   const [running, setRunning] = useState(true);\n\n//   const timer = useRef();\n\n//   useEffect(() => {\n//     if (running) {\n//       timer.current = setInterval(() => {\n//         setTime((prevTime) => prevTime + 1);\n//       }, 1000);\n//     }\n//     return () => clearInterval(timer.current);\n//   }, [running]);\n\n//   return (\n//     <div className=\"stopwatch\">\n//       <p className=\"timer\">{format(time)}</p>\n//       <div className=\"actions\">\n//         <button onClick={() => setTime(0)}>Restart</button>\n//         <button\n//           onClick={() => {\n//             if (running) clearInterval(timer.current);\n//             setRunning(!running);\n//           }}\n//         >\n//           {running ? \"Stop\" : \"Resume\"}\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n// const format = (time) => {\n//   let hours = Math.floor((time / 60 / 60) % 24);\n//   let minutes = Math.floor((time / 60) % 60);\n//   let seconds = Math.floor(time % 60);\n\n//   hours = hours < 10 ? \"0\" + hours : hours;\n//   minutes = minutes < 10 ? \"0\" + minutes : minutes;\n//   seconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n//   return hours + \":\" + minutes + \":\" + seconds;\n// };\n\nimport { useEffect, useState, useRef } from \"react\";\n\nexport default function Timer() {\n  const [time, setTime] = useState(0);\n  const [running, setRunning] = useState(false); // Initially not running\n  const [laps, setLaps] = useState([]); // Array to store lap times\n  const timer = useRef();\n\n  useEffect(() => {\n    if (running) {\n      timer.current = setInterval(() => {\n        setTime((prevTime) => prevTime + 1);\n      }, 1000);\n    } else {\n      clearInterval(timer.current);\n    }\n    return () => clearInterval(timer.current);\n  }, [running]);\n\n  // Function to handle lap\n  const handleLap = () => {\n    setLaps([...laps, time]);\n  };\n\n  // Function to format the time\n  const format = (time) => {\n    let hours = Math.floor((time / 60 / 60) % 24);\n    let minutes = Math.floor((time / 60) % 60);\n    let seconds = Math.floor(time % 60);\n\n    hours = hours < 10 ? \"0\" + hours : hours;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n    return hours + \":\" + minutes + \":\" + seconds;\n  };\n\n  return (\n    <div className=\"stopwatch\">\n      <p className=\"timer\">{format(time)}</p>\n      <div className=\"actions\">\n        <button onClick={() => setRunning(true)} disabled={running}>\n          Start\n        </button>\n        <button onClick={() => setRunning(false)} disabled={!running}>\n          Stop\n        </button>\n        <button onClick={() => setTime(0)} disabled={running}>\n          Restart\n        </button>\n        <button onClick={handleLap} disabled={!running}>\n          Lap\n        </button>\n      </div>\n      <div className=\"laps\">\n        <h3>Laps</h3>\n        <ul>\n          {laps.map((lap, index) => (\n            <li key={index}>Lap {index + 1}: {format(lap)}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\n"],"mappings":";;AAAA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAMY,KAAK,GAAGX,MAAM,CAAC,CAAC;EAEtBF,SAAS,CAAC,MAAM;IACd,IAAIS,OAAO,EAAE;MACXI,KAAK,CAACC,OAAO,GAAGC,WAAW,CAAC,MAAM;QAChCP,OAAO,CAAEQ,QAAQ,IAAKA,QAAQ,GAAG,CAAC,CAAC;MACrC,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,MAAM;MACLC,aAAa,CAACJ,KAAK,CAACC,OAAO,CAAC;IAC9B;IACA,OAAO,MAAMG,aAAa,CAACJ,KAAK,CAACC,OAAO,CAAC;EAC3C,CAAC,EAAE,CAACL,OAAO,CAAC,CAAC;;EAEb;EACA,MAAMS,SAAS,GAAGA,CAAA,KAAM;IACtBN,OAAO,CAAC,CAAC,GAAGD,IAAI,EAAEJ,IAAI,CAAC,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMY,MAAM,GAAIZ,IAAI,IAAK;IACvB,IAAIa,KAAK,GAAGC,IAAI,CAACC,KAAK,CAAEf,IAAI,GAAG,EAAE,GAAG,EAAE,GAAI,EAAE,CAAC;IAC7C,IAAIgB,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAEf,IAAI,GAAG,EAAE,GAAI,EAAE,CAAC;IAC1C,IAAIiB,OAAO,GAAGH,IAAI,CAACC,KAAK,CAACf,IAAI,GAAG,EAAE,CAAC;IAEnCa,KAAK,GAAGA,KAAK,GAAG,EAAE,GAAG,GAAG,GAAGA,KAAK,GAAGA,KAAK;IACxCG,OAAO,GAAGA,OAAO,GAAG,EAAE,GAAG,GAAG,GAAGA,OAAO,GAAGA,OAAO;IAChDC,OAAO,GAAGA,OAAO,GAAG,EAAE,GAAG,GAAG,GAAGA,OAAO,GAAGA,OAAO;IAEhD,OAAOJ,KAAK,GAAG,GAAG,GAAGG,OAAO,GAAG,GAAG,GAAGC,OAAO;EAC9C,CAAC;EAED,oBACEpB,OAAA;IAAKqB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBtB,OAAA;MAAGqB,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAEP,MAAM,CAACZ,IAAI;IAAC;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvC1B,OAAA;MAAKqB,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACtBtB,OAAA;QAAQ2B,OAAO,EAAEA,CAAA,KAAMrB,UAAU,CAAC,IAAI,CAAE;QAACsB,QAAQ,EAAEvB,OAAQ;QAAAiB,QAAA,EAAC;MAE5D;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT1B,OAAA;QAAQ2B,OAAO,EAAEA,CAAA,KAAMrB,UAAU,CAAC,KAAK,CAAE;QAACsB,QAAQ,EAAE,CAACvB,OAAQ;QAAAiB,QAAA,EAAC;MAE9D;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT1B,OAAA;QAAQ2B,OAAO,EAAEA,CAAA,KAAMvB,OAAO,CAAC,CAAC,CAAE;QAACwB,QAAQ,EAAEvB,OAAQ;QAAAiB,QAAA,EAAC;MAEtD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT1B,OAAA;QAAQ2B,OAAO,EAAEb,SAAU;QAACc,QAAQ,EAAE,CAACvB,OAAQ;QAAAiB,QAAA,EAAC;MAEhD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACN1B,OAAA;MAAKqB,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACnBtB,OAAA;QAAAsB,QAAA,EAAI;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACb1B,OAAA;QAAAsB,QAAA,EACGf,IAAI,CAACsB,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACnB/B,OAAA;UAAAsB,QAAA,GAAgB,MAAI,EAACS,KAAK,GAAG,CAAC,EAAC,IAAE,EAAChB,MAAM,CAACe,GAAG,CAAC;QAAA,GAApCC,KAAK;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAoC,CACnD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACxB,EAAA,CA9DuBD,KAAK;AAAA+B,EAAA,GAAL/B,KAAK;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}